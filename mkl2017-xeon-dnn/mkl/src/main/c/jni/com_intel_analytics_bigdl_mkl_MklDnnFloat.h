/*
 * Licensed to Intel Corporation under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * Intel Corporation licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_intel_analytics_bigdl_mkl_MklDnnFloat */

#ifndef _Included_com_intel_analytics_bigdl_mkl_MklDnnFloat
#define _Included_com_intel_analytics_bigdl_mkl_MklDnnFloat
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_intel_analytics_bigdl_mkl_MklDnnFloat
 * Method:    layoutCreate
 * Signature: (I[J[J)J
 */
JNIEXPORT jlong JNICALL Java_com_intel_analytics_bigdl_mkl_MklDnnFloat_layoutCreate
  (JNIEnv *, jclass, jint, jlongArray, jlongArray);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MklDnnFloat
 * Method:    layoutDelete
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_bigdl_mkl_MklDnnFloat_layoutDelete
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MklDnnFloat
 * Method:    layoutCreateFromPrimitive
 * Signature: (JI)J
 */
JNIEXPORT jlong JNICALL Java_com_intel_analytics_bigdl_mkl_MklDnnFloat_layoutCreateFromPrimitive
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MklDnnFloat
 * Method:    layoutGetMemorySize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_com_intel_analytics_bigdl_mkl_MklDnnFloat_layoutGetMemorySize
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MklDnnFloat
 * Method:    layoutCompare
 * Signature: (JJ)I
 */
JNIEXPORT jint JNICALL Java_com_intel_analytics_bigdl_mkl_MklDnnFloat_layoutCompare
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MklDnnFloat
 * Method:    allocateBuffer
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_com_intel_analytics_bigdl_mkl_MklDnnFloat_allocateBuffer
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MklDnnFloat
 * Method:    releaseBuffer
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_bigdl_mkl_MklDnnFloat_releaseBuffer
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MklDnnFloat
 * Method:    buffercpy
 * Signature: (JJJ)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_bigdl_mkl_MklDnnFloat_buffercpy
  (JNIEnv *, jclass, jlong, jlong, jlong);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MklDnnFloat
 * Method:    setZero
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_bigdl_mkl_MklDnnFloat_setZero
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MklDnnFloat
 * Method:    deletePrimitive
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_bigdl_mkl_MklDnnFloat_deletePrimitive
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MklDnnFloat
 * Method:    conversionCreate
 * Signature: (JJ)J
 */
JNIEXPORT jlong JNICALL Java_com_intel_analytics_bigdl_mkl_MklDnnFloat_conversionCreate
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MklDnnFloat
 * Method:    conversionExecuteToUsr
 * Signature: ([FIJJ)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_bigdl_mkl_MklDnnFloat_conversionExecuteToUsr
  (JNIEnv *, jclass, jfloatArray, jint, jlong, jlong);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MklDnnFloat
 * Method:    conversionExecuteToMkl
 * Signature: ([FIJJ)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_bigdl_mkl_MklDnnFloat_conversionExecuteToMkl
  (JNIEnv *, jclass, jfloatArray, jint, jlong, jlong);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MklDnnFloat
 * Method:    conversionExecuteMklToMkl
 * Signature: (JJJ)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_bigdl_mkl_MklDnnFloat_conversionExecuteMklToMkl
  (JNIEnv *, jclass, jlong, jlong, jlong);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MklDnnFloat
 * Method:    execute
 * Signature: ([JJ)I
 */
JNIEXPORT jint JNICALL Java_com_intel_analytics_bigdl_mkl_MklDnnFloat_execute
  (JNIEnv *, jclass, jlongArray, jlong);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MklDnnFloat
 * Method:    convolutionCreateForward
 * Signature: (IJJ[J[J[J[J[II)J
 */
JNIEXPORT jlong JNICALL Java_com_intel_analytics_bigdl_mkl_MklDnnFloat_convolutionCreateForward
  (JNIEnv *, jclass, jint, jlong, jlong, jlongArray, jlongArray, jlongArray, jlongArray, jintArray, jint);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MklDnnFloat
 * Method:    convolutionCreateBackwardData
 * Signature: (IJJ[J[J[J[J[II)J
 */
JNIEXPORT jlong JNICALL Java_com_intel_analytics_bigdl_mkl_MklDnnFloat_convolutionCreateBackwardData
  (JNIEnv *, jclass, jint, jlong, jlong, jlongArray, jlongArray, jlongArray, jlongArray, jintArray, jint);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MklDnnFloat
 * Method:    convolutionCreateBackwardKernel
 * Signature: (IJJ[J[J[J[J[II)J
 */
JNIEXPORT jlong JNICALL Java_com_intel_analytics_bigdl_mkl_MklDnnFloat_convolutionCreateBackwardKernel
  (JNIEnv *, jclass, jint, jlong, jlong, jlongArray, jlongArray, jlongArray, jlongArray, jintArray, jint);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MklDnnFloat
 * Method:    convolutionCreateBackwardBias
 * Signature: (IJJ[J)J
 */
JNIEXPORT jlong JNICALL Java_com_intel_analytics_bigdl_mkl_MklDnnFloat_convolutionCreateBackwardBias
  (JNIEnv *, jclass, jint, jlong, jlong, jlongArray);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MklDnnFloat
 * Method:    reluCreateForward
 * Signature: (JF)J
 */
JNIEXPORT jlong JNICALL Java_com_intel_analytics_bigdl_mkl_MklDnnFloat_reluCreateForward
  (JNIEnv *, jclass, jlong, jfloat);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MklDnnFloat
 * Method:    reluCreateBackward
 * Signature: (JJF)J
 */
JNIEXPORT jlong JNICALL Java_com_intel_analytics_bigdl_mkl_MklDnnFloat_reluCreateBackward
  (JNIEnv *, jclass, jlong, jlong, jfloat);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MklDnnFloat
 * Method:    poolCreateForward
 * Signature: (IJ[J[J[II)J
 */
JNIEXPORT jlong JNICALL Java_com_intel_analytics_bigdl_mkl_MklDnnFloat_poolCreateForward
  (JNIEnv *, jclass, jint, jlong, jlongArray, jlongArray, jintArray, jint);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MklDnnFloat
 * Method:    poolCreateBackward
 * Signature: (IJ[J[J[II)J
 */
JNIEXPORT jlong JNICALL Java_com_intel_analytics_bigdl_mkl_MklDnnFloat_poolCreateBackward
  (JNIEnv *, jclass, jint, jlong, jlongArray, jlongArray, jintArray, jint);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MklDnnFloat
 * Method:    linearCreateForwardBias
 * Signature: (J[JJ)J
 */
JNIEXPORT jlong JNICALL Java_com_intel_analytics_bigdl_mkl_MklDnnFloat_linearCreateForwardBias
  (JNIEnv *, jclass, jlong, jlongArray, jlong);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MklDnnFloat
 * Method:    linearCreateBackData
 * Signature: (J[JJ)J
 */
JNIEXPORT jlong JNICALL Java_com_intel_analytics_bigdl_mkl_MklDnnFloat_linearCreateBackData
  (JNIEnv *, jclass, jlong, jlongArray, jlong);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MklDnnFloat
 * Method:    linearCreateBackWeight
 * Signature: (J[JJ)J
 */
JNIEXPORT jlong JNICALL Java_com_intel_analytics_bigdl_mkl_MklDnnFloat_linearCreateBackWeight
  (JNIEnv *, jclass, jlong, jlongArray, jlong);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MklDnnFloat
 * Method:    linearCreateBackBias
 * Signature: (J[J)J
 */
JNIEXPORT jlong JNICALL Java_com_intel_analytics_bigdl_mkl_MklDnnFloat_linearCreateBackBias
  (JNIEnv *, jclass, jlong, jlongArray);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MklDnnFloat
 * Method:    lrnCreateForward
 * Signature: (JJFFF)J
 */
JNIEXPORT jlong JNICALL Java_com_intel_analytics_bigdl_mkl_MklDnnFloat_lrnCreateForward
  (JNIEnv *, jclass, jlong, jlong, jfloat, jfloat, jfloat);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MklDnnFloat
 * Method:    lrnCreateBackward
 * Signature: (JJJFFF)J
 */
JNIEXPORT jlong JNICALL Java_com_intel_analytics_bigdl_mkl_MklDnnFloat_lrnCreateBackward
  (JNIEnv *, jclass, jlong, jlong, jlong, jfloat, jfloat, jfloat);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MklDnnFloat
 * Method:    concatCreate
 * Signature: (J[J)J
 */
JNIEXPORT jlong JNICALL Java_com_intel_analytics_bigdl_mkl_MklDnnFloat_concatCreate
  (JNIEnv *, jclass, jlong, jlongArray);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MklDnnFloat
 * Method:    splitCreate
 * Signature: (JJ[J)J
 */
JNIEXPORT jlong JNICALL Java_com_intel_analytics_bigdl_mkl_MklDnnFloat_splitCreate
  (JNIEnv *, jclass, jlong, jlong, jlongArray);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MklDnnFloat
 * Method:    sumCreate
 * Signature: (JJ[F)J
 */
JNIEXPORT jlong JNICALL Java_com_intel_analytics_bigdl_mkl_MklDnnFloat_sumCreate
  (JNIEnv *, jclass, jlong, jlong, jfloatArray);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MklDnnFloat
 * Method:    batchNormCreateForward
 * Signature: (JF)J
 */
JNIEXPORT jlong JNICALL Java_com_intel_analytics_bigdl_mkl_MklDnnFloat_batchNormCreateForward
  (JNIEnv *, jclass, jlong, jfloat);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MklDnnFloat
 * Method:    batchNormCreateBackward
 * Signature: (JF)J
 */
JNIEXPORT jlong JNICALL Java_com_intel_analytics_bigdl_mkl_MklDnnFloat_batchNormCreateBackward
  (JNIEnv *, jclass, jlong, jfloat);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MklDnnFloat
 * Method:    batchNormCreateScaleShift
 * Signature: (JF)J
 */
JNIEXPORT jlong JNICALL Java_com_intel_analytics_bigdl_mkl_MklDnnFloat_batchNormCreateScaleShift
  (JNIEnv *, jclass, jlong, jfloat);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MklDnnFloat
 * Method:    setScaleShift
 * Signature: (I[FJ[FJJI)J
 */
JNIEXPORT jlong JNICALL Java_com_intel_analytics_bigdl_mkl_MklDnnFloat_setScaleShift
  (JNIEnv *, jclass, jint, jfloatArray, jlong, jfloatArray, jlong, jlong, jint);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MklDnnFloat
 * Method:    setGradScaleShift
 * Signature: (I[FJ[FJJI)J
 */
JNIEXPORT jlong JNICALL Java_com_intel_analytics_bigdl_mkl_MklDnnFloat_setGradScaleShift
  (JNIEnv *, jclass, jint, jfloatArray, jlong, jfloatArray, jlong, jlong, jint);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MklDnnFloat
 * Method:    unPadding
 * Signature: ([FJJ[J[J[J)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_bigdl_mkl_MklDnnFloat_unPadding
  (JNIEnv *, jclass, jfloatArray, jlong, jlong, jlongArray, jlongArray, jlongArray);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MklDnnFloat
 * Method:    padding
 * Signature: ([FJJ[J[J[J[J)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_bigdl_mkl_MklDnnFloat_padding
  (JNIEnv *, jclass, jfloatArray, jlong, jlong, jlongArray, jlongArray, jlongArray, jlongArray);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MklDnnFloat
 * Method:    getMklVersion
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_com_intel_analytics_bigdl_mkl_MklDnnFloat_getMklVersion
  (JNIEnv *, jclass);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MklDnnFloat
 * Method:    getAffinity
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_intel_analytics_bigdl_mkl_MklDnnFloat_getAffinity
  (JNIEnv *, jclass);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MklDnnFloat
 * Method:    setAffinity
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_bigdl_mkl_MklDnnFloat_setAffinity
  (JNIEnv *, jclass);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MklDnnFloat
 * Method:    release
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_bigdl_mkl_MklDnnFloat_release
  (JNIEnv *, jclass);

#ifdef __cplusplus
}
#endif
#endif
